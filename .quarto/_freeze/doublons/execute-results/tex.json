{
  "hash": "5eaed6f7d2fe94309f53a00810d954ae",
  "result": {
    "markdown": "# Détection et suppression des doublons\n\nLorsque nous travaillons avec des données, il n'est pas rare d'avoir affaire à des doublons, c'est-à-dire des enregistrements qui répètent les mêmes informations. La présence de doublons peut rendre nos analyses moins fiables, car ils peuvent fausser les résultats.\n\nLa détection et suppression des doublons est donc une étape importante de la préparation des données, qui doit être réalisée avant toute analyse.\n\nUne fois que nous avons détecté les doublons, nous pouvons les supprimer avant de continuer nos analyses.\n\nIl est important de documenter le processus de détection et de suppression des doublons afin de pouvoir reproduire les résultats à tout moment et de s'assurer de la qualité des données utilisées pour les analyses.\n\nLe code suivant permet de générer les données sur lesquelles nous allons travailler.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(df <- data.frame(\n  Prenom   = c(rep('Jean',3), rep(\"Alain\", 2)), \n  Activite = c(rep('Foot',3), rep(\"Danse\", 2)), \n  Lieu     = c(rep('Kinshasa',3), rep(\"Goma\", 2)), \n  Date     = as.Date(c(\"2023-05-12\", \"2023-05-16\", \"2023-05-14\", \"2023-05-17\", \"2023-05-13\"))\n                  ))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Prenom Activite     Lieu       Date\n1   Jean     Foot Kinshasa 2023-05-12\n2   Jean     Foot Kinshasa 2023-05-16\n3   Jean     Foot Kinshasa 2023-05-14\n4  Alain    Danse     Goma 2023-05-17\n5  Alain    Danse     Goma 2023-05-13\n```\n:::\n:::\n\n\n\n## Détection des doublons\n\nLa fonction `duplicated` permet de détecter les doublons sur toutes les colonnes d'un tableau de données. On peut cependant lui fournir un tableau de données ne contenant que les variables sur lesquelles baser la recherche.\n\nCette fonction retourne `TRUE` si la ligne est un doublon et `FALSE` dans le cas contraire. Ici, nous cherchons les doublons sur les trois premières colonnes.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nduplicated(df[, - 4])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE  TRUE FALSE  TRUE\n```\n:::\n:::\n\n\n\nOn peut ajouter `which()` à la fonction précédente pour retourner les numéros des lignes qui sont des doublons.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwhich(duplicated(df[, - 4]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 3 5\n```\n:::\n:::\n\n\n\nLe code suivant permet d'afficher les doublons détectés dans notre tableau de données.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndup <- which(duplicated(df[, - 4]))\n\ndf[dup, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Prenom Activite     Lieu       Date\n2   Jean     Foot Kinshasa 2023-05-16\n3   Jean     Foot Kinshasa 2023-05-14\n5  Alain    Danse     Goma 2023-05-13\n```\n:::\n:::\n\n\n\n## Suppression des doublons\n\n### `duplicated`\n\nPour supprimer les doublons, il suffit d'ajouter le signe négatif à l'objet qui contient les lignes de doublons.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndup <- which(duplicated(df[, - 4]))\ndf[-dup, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Prenom Activite     Lieu       Date\n1   Jean     Foot Kinshasa 2023-05-12\n4  Alain    Danse     Goma 2023-05-17\n```\n:::\n:::\n\n\n\n### `distinct`\n\n`distinct` fait partie des focntions du package`dplyr` et permet de supprimer les doublons en ne retournant que les observations distinctes.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  distinct(Prenom, Activite, Lieu, .keep_all = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Prenom Activite     Lieu       Date\n1   Jean     Foot Kinshasa 2023-05-12\n2  Alain    Danse     Goma 2023-05-17\n```\n:::\n:::\n\n\n\nL'argument `.keep_all = T` permet de garder toutes les colonnes dans le résultat.\n\n## Retenir les observations par rapport à une date\n\nIl arrive qu'on ait besoin de retenir les observations, non pas par rapport à leur ordre dans le tableau de données, mais par rapport à une autre variable (une date par exemple).\n\nPour ce faire, nous devons d'abord grouper les observations selon la/les variable(s) clés, puis les trier selon la variable contenant le date. Une fois les données triées, nous pouvons sélectionner les premières ou les dernières observations.\n\nLe code suivant permet de retenir les observations dont la date est la plus ancienne\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Grouper et Trier par ordre croissant \ndf_cr <- df %>% \n  group_by(Prenom, Activite, Lieu) %>% \n  arrange(Date) \n\ndf_cr %>% \n  distinct(Prenom, Activite, Lieu, .keep_all = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 x 4\n# Groups:   Prenom, Activite, Lieu [2]\n  Prenom Activite Lieu     Date      \n  <chr>  <chr>    <chr>    <date>    \n1 Jean   Foot     Kinshasa 2023-05-12\n2 Alain  Danse    Goma     2023-05-13\n```\n:::\n:::\n\n\n\nIci, nous retenons les observations avec la date la plus récente.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Grouper et Trier par ordre décroissant\ndf_dec <- df %>% \n  group_by(Prenom, Activite, Lieu) %>% \n  arrange(desc(Date)) \n\ndf_dec %>% \n  distinct(Prenom, Activite, Lieu, .keep_all = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 x 4\n# Groups:   Prenom, Activite, Lieu [2]\n  Prenom Activite Lieu     Date      \n  <chr>  <chr>    <chr>    <date>    \n1 Alain  Danse    Goma     2023-05-17\n2 Jean   Foot     Kinshasa 2023-05-16\n```\n:::\n:::\n\n\n\nNous pouvons aussi utiliser la fonction `slice` sur le tableau de données groupées et triées comme suit.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_dec %>% \n  slice(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 x 4\n# Groups:   Prenom, Activite, Lieu [2]\n  Prenom Activite Lieu     Date      \n  <chr>  <chr>    <chr>    <date>    \n1 Alain  Danse    Goma     2023-05-17\n2 Jean   Foot     Kinshasa 2023-05-16\n```\n:::\n:::\n\n\n\nPour sauvegarder le tableau de données sans doublons, il faut l'affecter un à objet.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}